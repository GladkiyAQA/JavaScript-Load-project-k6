require('dotenv').config(); 

const puppeteer = require('puppeteer');
const fs = require('fs');
const { spawn } = require('child_process');

(async () => {
  const baseUrl = process.env.BASE_URL;
  const userAgent = process.env.USER_AGENT;

  if (!baseUrl) {
    console.error('–û—à–∏–±–∫–∞: BASE_URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env');
    process.exit(1);
  }

  console.log(`–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${baseUrl}`);

  const browser = await puppeteer.launch({
    headless: true,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-web-security',
    ],
    defaultViewport: null,
  });

  const page = await browser.newPage();
  await page.setUserAgent(userAgent);
  await page.setExtraHTTPHeaders({
    'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
  });

  try {
    await page.goto(baseUrl, { waitUntil: 'domcontentloaded', timeout: 180000 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    await browser.close();
    process.exit(1);
  }

  console.log('–û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è cookies...');

  const maxWaitTime = 180000; 
  const checkInterval = 1000;
  let sessionId = null;

  for (let elapsed = 0; elapsed < maxWaitTime; elapsed += checkInterval) {
    const cookies = await page.cookies();
    const sessionIdCookie = cookies.find((cookie) => cookie.name === 'sessionId');
    if (sessionIdCookie) {
      sessionId = sessionIdCookie.value;
      break;
    }
    await new Promise((resolve) => setTimeout(resolve, checkInterval));
  }

  await browser.close();

  if (!sessionId) {
    console.error('‚ùå sessionId –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.');
    process.exit(1);
  }

  console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω sessionId: ${sessionId}`);
  fs.writeFileSync('sessionId.txt', sessionId, 'utf8');
  console.log('üíæ sessionId —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ sessionId.txt');

  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å sessionId...');

  // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
  const logFile = fs.createWriteStream('logs.txt', { flags: 'a' });

  // –ó–∞–ø—É—Å–∫–∞–µ–º k6
  const k6 = spawn('k6', ['run', 'loadTest.js'], {
    env: { ...process.env, SESSION_ID: sessionId }
  });

  k6.stdout.on('data', (data) => {
    process.stdout.write(data);
    logFile.write(data);
  });

  k6.stderr.on('data', (data) => {
    process.stderr.write(data);
    logFile.write(data);
  });

  k6.on('close', (code) => {
    console.log(`k6 –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`);
    logFile.end();
  });
})();
